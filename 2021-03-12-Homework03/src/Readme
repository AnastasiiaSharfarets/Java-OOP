1) Kласс Person сделать абстрактным.
2) Класс Employee наследующий от Person сделать абстракнтым. И добавить в него абстрактный
метод double calcSalary()
3) Класс WageEmployee наследующий от Employee:
При реализации расчета зарплаты используем алгоритм
умножения часов на ставку в час.
4) Класс Manager наследующий от Employee:
При реализации расчета зарплаты используем алгоритм умножения baseSalary на позиционный
уровень.
5) Класс SalesMan наследующий от Employee:
При реализации расчета зарплаты используе
м алгоритм сложения baseSalary с бонусом
переведенным в деньги(бонус это процент от продаж).

6) Пишем аппликационный класс EmployeesAppl с методом main():
A) Создаем по три экземпляра Manager, SalesMan, WageEmployee.
B) Помещаем все экземпляры в массив Em
ployee[] emps
C) Напишите метод double getSumSalaryAllEmployees(emps) принимающий массив сотрудников и
возвращающий сумму всех зарплат всех сотрудников.
D)* Напишите метод void printEmpsWithSalaryMoreThan(emps, salary) который принимает массив
сотрудников
и значение зарплаты с которой будем сравнивать. Метод выводит на консоль
сотрудников, у которых заработная плата равна или выше, чем переданная в метод с аргументом salary.
E)* Напишите метод double getСompanyRevenue (emps) принимающий массив сотрудников и
возвращающий доход компании(сумма продаж всех менеджеров по продажам)